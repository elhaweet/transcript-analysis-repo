[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "google.generativeai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.generativeai",
        "description": "google.generativeai",
        "detail": "google.generativeai",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "CallCenterProcessor",
        "kind": 6,
        "importPath": "src",
        "description": "src",
        "peekOfCode": "class CallCenterProcessor:\n    def __init__(self):\n        \"\"\"Initialize the Call Center Processor with Gemini API\"\"\"\n        # Load environment variables\n        load_dotenv()\n        # Configure the API key\n        self.api_key = os.getenv('GEMINI_API_KEY')\n        if not self.api_key:\n            raise ValueError(\"GEMINI_API_KEY not found in .env file\")\n        genai.configure(api_key=self.api_key)",
        "detail": "src",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src",
        "description": "src",
        "peekOfCode": "def main():\n    \"\"\"Main function to run the call center processor\"\"\"\n    # Configuration\n    INPUT_FILE = \"row_data.csv\"\n    OUTPUT_FILE = \"processed_data.csv\"\n    BATCH_SIZE = 5\n    # NEW CONTROL VARIABLES\n    PROCESS_ALL = False       # Set to True to process the entire CSV\n    NUM_RECORDS = 15         # Only used if PROCESS_ALL is False\n    try:",
        "detail": "src",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src",
        "description": "src",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CallCenterProcessor:\n    def __init__(self):\n        \"\"\"Initialize the Call Center Processor with Gemini API\"\"\"\n        # Load environment variables\n        load_dotenv()\n        # Configure the API key\n        self.api_key = os.getenv('GEMINI_API_KEY')\n        if not self.api_key:\n            raise ValueError(\"GEMINI_API_KEY not found in .env file\")",
        "detail": "src",
        "documentation": {}
    }
]